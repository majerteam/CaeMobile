#:import SlideTransition kivy.uix.screenmanager.SlideTransition
#:import json json
#:import ListAdapter kivy.adapters.listadapter.ListAdapter
#:import Factory kivy.factory.Factory
#:set small_button_height '40sp'

BoxLayout:
    orientation: 'vertical'
    BoxLayout:
        size_hint_y: None
        height: '48sp'

        MenuButton:
            source: 'data/sync.png'
            # XXX find a nice way to update this in UI
#            text: 'sync (%s)' % (app.settings and len(app.settings.items('tosync')) or 0)
            text: 'sync (%s)' % (app.pool and len(app.pool.tosync()) or 0)
            on_press: app.sync_datas()
            disabled: not app.pool or not len(app.pool.tosync())


        MenuButton:
            source: "data/add.png"
            text: 'Ajouter'
            on_press:
                screenmanager.transition.direction = 'left'
                screenmanager.current = 'add'

        MenuButton:
            source: 'data/settings.png'
            text: "Configuration"
            on_press:
                screenmanager.transition.direction = 'down'
                screenmanager.current = 'settings'


    ScreenManager:
        id: screenmanager
        opacity: 0.9
        transition: SlideTransition()

        ExpenseListScreen:
            name: 'expenses'

        AddScreen:
            name: 'add'

        SettingsScreen:
            name: 'settings'

        KmAddFormScreen:
            name: 'kmaddform'

        CommonAddFormScreen:
            name: 'commonaddform'


<MenuButton@Button>:
    source: ''
    text: ''
    color: 0, 0, 0, 0

    BoxLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size

        height: .9 * root.height
        center_y: root.center_y
        x: root.x + sp(2)

        Image:
            source: root.source
            size_hint_x: None
            width: self.texture_size[0]

        Label:
            text: root.text
            size_hint_x: None
            width: self.texture_size[0]


<SettingsScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'
        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'up'
                root.manager.current = 'expenses'

        BoxLayout:
            orientation: 'vertical'
            Widget:
            GridLayout:
                cols: 2
                Widget:
                Widget:
                Label:
                    text: 'Serveur'
                    size_hint_y: None
                    height: small_button_height
                TextInput:
                    multiline: False
                    size_hint_y: None
                    height: small_button_height
                    text: app.settings and app.settings.get('settings', 'server') or ''
                    on_text_validate:
                        app.settings.set('settings', 'server', args[0].text)
                        login.focus = True
                    on_focus: if not self.focus: self.dispatch('on_text_validate')

                Label:
                    text: 'login'
                    size_hint_y: None
                    height: small_button_height
                TextInput:
                    id: login
                    multiline: False
                    size_hint_y: None
                    height: small_button_height
                    text: app.settings and app.settings.get('settings', 'login') or ''
                    on_text_validate:
                        app.settings.set('settings', 'login', args[0].text)
                        password.focus = True
                    on_focus: if not self.focus: self.dispatch('on_text_validate')

                Label:
                    size_hint_y: None
                    height: small_button_height
                    text: 'password'
                TextInput:
                    id: password
                    size_hint_y: None
                    height: small_button_height
                    multiline: False
                    text: app.settings and app.settings.get('settings', 'password') or ''
                    on_text_validate:
                        app.settings.set('settings', 'password', args[0].text)
                    password: True
                    on_focus: if not self.focus: self.dispatch('on_text_validate')

                Label:
                    size_hint_y: None
                    height: small_button_height
                    text: 'sync on wifi only'
                Switch:
                    size_hint_y: None
                    height: small_button_height
                    active: app.settings and app.settings.get('settings', 'sync_wifi') == 'True' or False
                    on_active: app.settings.set('settings', 'sync_wifi', str(args[1]))

            Widget:
            Widget:

            Button:
                size_hint_y: None
                height: small_button_height
                text: "Configurer"
                on_press:
                    app.check_configuration()

            Widget:


<AddScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'
        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'
        Widget:
            size_hint_y: None
            height: small_button_height

        Button:
            size_hint_y: None
            height: '60dp'
            text: 'Frais divers'
            on_press:
                root.manager.transition.direction = 'left'
                root.manager.current = 'commonaddform'
        Widget:
            size_hint_y: None

        Button:
            size_hint_y: None
            height: '60dp'
            text: 'Frais kilométriques'
            on_press:
                root.manager.transition.direction = 'left'
                root.manager.current = 'kmaddform'

        Widget:

<KmEditFormScreen>:

    BoxLayout:
        orientation: 'vertical'
        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Supprimer'
            on_press:
                app.delete_expense(root.expense)
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'


        GridLayout:
            cols: 2
            Widget:
            Widget:
            Label:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                ToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            Label:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            Spinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values: app.settings and [opt['label'].decode('utf-8') for opt in json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes'))
            Label:
                text: "Date (jj-mm-AAAA)"
            TextInput:
                id: date
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.get_date()
                on_text_validate:
                    root.set_value('date', args[0].text)
                    start.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')

            Label:
                text: "Point de départ"
            TextInput:
                id: start
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('start') or ""
                on_text_validate:
                    root.set_value('start', args[0].text)
                    end.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Point d'arrivée"
            TextInput:
                id: end
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('end') or ""
                on_text_validate:
                    root.set_value('end', args[0].text)
                    ht.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Nombre de kilomètres"
            TextInput:
                id: ht
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('km') or ""
                on_text_validate:
                    root.set_value('km', args[0].text)
                    description.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Description"
            TextInput:
                id: description
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('description') or ""
                on_text_validate:
                    root.set_value('description', args[0].text)
                    valid.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')

            Widget:
            Widget:
            Button:
                id: valid
                size_hint_y: None
                height: small_button_height
                text: "Enregistrer"
                on_press:
                    app.store_expense(root.name, root.expense)
                    root.manager.transition.direction = 'right'
                    root.manager.current = 'expenses'

            Widget:


<KmAddFormScreen>:

    BoxLayout:
        orientation: 'vertical'
        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        GridLayout:
            cols: 2
            Widget:
            Widget:
            Label:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                ToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            Label:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            Spinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values: app.settings and [opt['label'].decode('utf-8') for opt in json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes'))
            Label:
                text: "Date (jj-mm-AAAA)"
            TextInput:
                id: date
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.get_date()
                on_text_validate:
                    root.set_value('date', args[0].text)
                    start.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')

            Label:
                text: "Point de départ"
            TextInput:
                id: start
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('start') or ""
                on_text_validate:
                    root.set_value('start', args[0].text)
                    end.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Point d'arrivée"
            TextInput:
                id: end
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('end') or ""
                on_text_validate:
                    root.set_value('end', args[0].text)
                    ht.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Nombre de kilomètres"
            TextInput:
                id: ht
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('km') or ""
                on_text_validate:
                    root.set_value('km', args[0].text)
                    description.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Description"
            TextInput:
                id: description
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('description') or ""
                on_text_validate:
                    root.set_value('description', args[0].text)
                    valid.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')

            Widget:
            Widget:
            Button:
                id: valid
                size_hint_y: None
                height: small_button_height
                text: "Enregistrer"
                on_press:
                    app.store_expense(root.name, root.expense)
                    root.manager.transition.direction = 'right'
                    root.manager.current = 'expenses'

            Widget:

<CommonAddFormScreen>:

    BoxLayout:
        orientation: 'vertical'
        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        GridLayout:
            cols: 2
            Widget:
            Widget:
            Label:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                ToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            Label:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            Spinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values: app.settings and [opt['label'].decode('utf-8') for opt in json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes'))
            Label:
                text: "Date (jj-mm-AAAA)"
            TextInput:
                id: date
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.get_date()
                on_text_validate:
                    root.set_value('date', args[0].text)
                    description.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Description"
            TextInput:
                id: description
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('description') or ""
                on_text_validate:
                    root.set_value('description', args[0].text)
                    ht.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')

            Label:
                text: "Montant HT"
            TextInput:
                id: ht
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('ht') or ""
                on_text_validate:
                    root.set_value('ht', args[0].text)
                    tva.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Montant de la TVA"
            TextInput:
                id: tva
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('tva') or ""
                on_text_validate:
                    root.set_value('tva', args[0].text)
                    valid.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Widget:
            Widget:
            Button:
                id: valid
                size_hint_y: None
                height: small_button_height
                text: "Enregistrer"
                on_press:
                    app.store_expense(root.name, root.expense)
                    root.manager.transition.direction = 'right'
                    root.manager.current = 'expenses'

            Widget:

<CommonEditFormScreen>:

    BoxLayout:
        orientation: 'vertical'
        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        Button:
            size_hint_y: None
            height: small_button_height
            text: 'Supprimer'
            on_press:
                app.delete_expense(root.expense)
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        GridLayout:
            cols: 2
            Widget:
            Widget:
            Label:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                ToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                ToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            Label:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            Spinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values: app.settings and [opt['label'].decode('utf-8') for opt in json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes'))
            Label:
                text: "Date (jj-mm-AAAA)"
            TextInput:
                id: date
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.get_date()
                on_text_validate:
                    root.set_value('date', args[0].text)
                    description.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Description"
            TextInput:
                id: description
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('description') or ""
                on_text_validate:
                    root.set_value('description', args[0].text)
                    ht.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')

            Label:
                text: "Montant HT"
            TextInput:
                id: ht
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('ht') or ""
                on_text_validate:
                    root.set_value('ht', args[0].text)
                    tva.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Label:
                text: "Montant de la TVA"
            TextInput:
                id: tva
                multiline: False
                size_hint_y: None
                height: small_button_height
                text: root.expense and root.expense.get('tva') or ""
                on_text_validate:
                    root.set_value('tva', args[0].text)
                    valid.focus = True
                on_focus: if not self.focus: self.dispatch('on_text_validate')
            Widget:
            Widget:
            Button:
                id: valid
                size_hint_y: None
                height: small_button_height
                text: "Enregistrer"
                on_press:
                    app.store_expense(root.name, root.expense)
                    root.manager.transition.direction = 'right'
                    root.manager.current = 'expenses'

            Widget:


<ExpenseListScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'
        ListView:
            adapter: ListAdapter(data=root.data, cls=Factory.ExpenseListItem, args_converter=root.args_converter)

<ExpenseListItem>:
    height: '36sp'
    size_hint_y: None

    canvas:
        Color:
            rgb: .3, .3, .3
        Rectangle:
            pos: self.pos
            size: self.width, 1

    BoxLayout:

        padding: '5dp'

        Image:
            source: 'data/valid_16.png' if root.synced else  'data/edit_16.png' if root.todo in ('update', 'add') else 'data/delete_16.png' if root.todo == 'delete' else ''
            mipmap: True
            size_hint_x: None
            width: self.height

        Label:
            text: root.date

        Label:
            text: root.description

        Button:
            text: '>'
            size_hint_x: None
            width: self.height
            on_release: app.edit_expense(root.index)



<SyncPopup>:
    size_hint: .9, .5
    title: 'syncing'
    auto_dismiss: False

    BoxLayout:
        orientation: 'vertical'
        Label:
            text: '%s/%s' % (root.progress, len(app.settings.items('tosync')))

        Widget:
            size_hint_y: None
            height: '30sp'
            canvas:
                Color:
                    rgba: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

                Color:
                    rgba: .5, .5, .5, 1
                Rectangle:
                    pos: self.x + 4, self.y + 4
                    size:
                        (
                        (self.width - 8) * (root.progress / (len(app.settings.items('tosync'))+1)),
                        self.height - 8
                        )
        Button:
            text: 'errors: %s' % len(root.errors)
            # XXX do some error display

        Button:
            activated: root.done
            text: 'Ok'
            on_press: root.dismiss()

        ScrollView:
            GridLayout:
                height: self.minimum_height
                size_hint_y: None
                cols: 1

                Label:
                    text: ''.join(unicode(x) for x in root.errors)
                    size_hint_y: None
                    height: self.texture_size[1] + 2 * self.line_height
