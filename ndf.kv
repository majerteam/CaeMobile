#:import SlideTransition kivy.uix.screenmanager.SlideTransition
#:import json json
#:import ListAdapter kivy.adapters.listadapter.ListAdapter
#:import Factory kivy.factory.Factory

# THEMING - COLORS
#:set small_button_height '40sp'
#:set backround_color 1, 1, 1, 1
#:set text_color 153/255., 153/255., 153/255., 1
#:set text_color_light 1, 1, 1, 1
#:set text_color_dark 0, 0, 0, 1
#:set button_color 26/255., 26/255., 26/255., 1
#:set button_down_color 60/255., 60/255., 60/255., 1
#:set background_dark 245/255., 245/255., 245/255., 1

BoxLayout:
    canvas.before:
        Color:
            rgba: backround_color
        Rectangle:
            pos: self.pos
            size: self.size

    orientation: 'vertical'
    BoxLayout:
        size_hint_y: None
        height: '48sp'

        MenuButton:
            source: 'data/sync.png'
            # XXX find a nice way to update this in UI
#            text: 'sync (%s)' % (app.settings and len(app.settings.items('tosync')) or 0)
            text: 'sync (%s)' % (app.pool and len(app.pool.tosync()) or 0)
            on_press: app.sync_datas()
            disabled: not app.pool or not len(app.pool.tosync())


        MenuButton:
            source: "data/add.png"
            text: 'Ajouter'
            on_press:
                screenmanager.transition.direction = 'left'
                screenmanager.current = 'add'

        MenuButton:
            source: 'data/settings.png'
            text: "Configuration"
            on_press:
                screenmanager.transition.direction = 'down'
                screenmanager.current = 'settings'


    ScreenManager:
        id: screenmanager
        opacity: 0.9
        transition: SlideTransition()

        ExpenseListScreen:
            name: 'expenses'

        AddScreen:
            name: 'add'

        SettingsScreen:
            name: 'settings'

        KmAddFormScreen:
            name: 'kmaddform'

        CommonAddFormScreen:
            name: 'commonaddform'


<-MenuButton@Button>:
    source: ''
    text: ''

    on_state: print self.state == 'down'

    BoxLayout:
        canvas:
            Color:
                rgba: button_down_color if root.state == 'down' else button_color

            Rectangle:
                pos: root.pos
                size: root.size

        height: .9 * root.height
        center_y: root.center_y
        x: root.x + sp(2)

        Image:
            source: root.source
            size_hint_x: None
            width: self.texture_size[0]

        Label:
            text: root.text
            size_hint_x: None
            width: self.texture_size[0]
            color: text_color_light if root.state == 'down' else text_color

<NormalLabel@Label>:
    color: text_color_dark

<-NormalButton@Button>:
    size_hint_y: None
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<-NormalToggleButton@ToggleButton>:
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<NormalSpinner@Spinner>:
    option_cls: Factory.NormalSpinnerOption
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<NormalSpinnerOption@SpinnerOption>:
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<SettingsScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'up'
                root.manager.current = 'expenses'

        BoxLayout:
            orientation: 'vertical'
            Widget:
            GridLayout:
                cols: 2
                Widget:
                Widget:
                NormalLabel:
                    text: 'Serveur'
                    size_hint_y: None
                    height: small_button_height
                SettingFormTextInput:
                    setting: 'server'
                    next_form: login

                NormalLabel:
                    text: 'login'
                    size_hint_y: None
                    height: small_button_height
                SettingFormTextInput:
                    id: login
                    setting: 'login'
                    next_form: password

                NormalLabel:
                    size_hint_y: None
                    height: small_button_height
                    text: 'password'

                SettingFormTextInput:
                    id: password
                    setting: 'password'
                    password: True

                NormalLabel:
                    size_hint_y: None
                    height: small_button_height
                    text: 'sync on wifi only'
                SettingSwitch:
                    setting: 'sync_wifi'

            Widget:

            NormalButton:
                height: small_button_height
                text: "Configurer"
                on_press:
                    app.check_configuration()

<AddScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'
        Widget:
            size_hint_y: None
            height: small_button_height

        NormalButton:
            height: '60dp'
            text: 'Frais divers'
            on_press:
                root.manager.transition.direction = 'left'
                root.manager.current = 'commonaddform'
        Widget:
            size_hint_y: None

        NormalButton:
            height: '60dp'
            text: 'Frais kilométriques'
            on_press:
                root.manager.transition.direction = 'left'
                root.manager.current = 'kmaddform'

        Widget:

<KmEditFormScreen>:
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        NormalButton:
            size_hint_y: None
            height: small_button_height
            text: 'Supprimer'
            on_press:
                app.delete_expense(root.expense)
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'


        GridLayout:
            cols: 2
            Widget:
            Widget:
            Label:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height

            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height

            NormalSpinner:
                text:
                    root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values:
                    (
                    app.settings and [opt['label'].decode('utf-8') for opt in
                    json.loads(app.settings.get('main',
                    'expensetypes')).get('kmtypes')] or []
                    )

                size_hint_y: None
                height: small_button_height
                on_text:
                    (
                    root.set_value('type', args[0].text,
                    json.loads(app.settings.get('main',
                    'expensetypes')).get('kmtypes'))
                    )

            Widget:
            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))

            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            ExpenseFormTextInput:
                id: date
                text: root.get_date()
                expense: root.expense
                next_form: start

            NormalLabel:
                text: "Point de départ"
            ExpenseFormTextInput:
                id: start
                attribute: 'start'
                expense: root.expense
                next_form: end

            NormalLabel:
                text: "Point d'arrivée"
            ExpenseFormTextInput:
                id: end
                attribute: 'end'
                expense: root.exense
                next_form: ht

            NormalLabel:
                text: "Nombre de kilomètres"
            FormTextInput:
                id: ht
                attribute: 'km'
                expense: root.exense
                next_form: description

            NormalLabel:
                text: "Description"
            FormTextInput:
                id: description
                attribute: 'description'
                expense: root.expense

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        date.text = ''
                        start.text = ''
                        end.text = ''
                        ht.text = ''
                        description.text = ''

            Widget:
                id: colspan1


<KmAddFormScreen>:
    on_enter:
        self.expense['transport'] = 'True'
        print self.expense
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        GridLayout:
            cols: 2
            Widget:
            Widget:
            NormalLabel:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            NormalSpinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values: app.settings and [opt['label'].decode('utf-8') for opt in json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes'))
            Widget
            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))
            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            FormTextInput:
                id: date
                text: root.get_date()
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('date', args[0].text)
                    start.focus = True

            NormalLabel:
                text: "Point de départ"
            FormTextInput:
                id: start
                text: root.expense and root.expense.get('start') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('start', args[0].text)
                    end.focus = True

            NormalLabel:
                text: "Point d'arrivée"
            FormTextInput:
                id: end
                text: root.expense and root.expense.get('end') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('end', args[0].text)
                    ht.focus = True

            NormalLabel:
                text: "Nombre de kilomètres"
            FormTextInput:
                id: ht
                text: root.expense and root.expense.get('km') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('km', args[0].text)
                    description.focus = True

            NormalLabel:
                text: "Description"
            FormTextInput:
                id: description
                text: root.expense and root.expense.get('description') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('description', args[0].text)
                    valid.focus = True

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    disabled: not (root.expense and root.expense.get('type'))
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        root.expense = {}
                        date.text = ''
                        start.text = ''
                        end.text = ''
                        ht.text = ''
                        description.text = ''

            Widget:
                id: colspan1

<CommonAddFormScreen>:
    on_enter:
        self.expense['transport'] = 'False'
        print self.expense
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        GridLayout:
            cols: 2
            Widget:
            Widget:
            NormalLabel:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            NormalSpinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values: app.settings and [opt['label'].decode('utf-8') for opt in json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes'))
            Widget
            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))
            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            FormTextInput:
                id: date
                text: root.get_date()
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('date', args[0].text)
                    description.focus = True

            NormalLabel:
                text: "Description"
            FormTextInput:
                id: description
                text: root.expense and root.expense.get('description') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('description', args[0].text)
                    ht.focus = True

            NormalLabel:
                text: "Montant HT"
            FormTextInput:
                id: ht
                text: root.expense and root.expense.get('ht') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('ht', args[0].text)
                    tva.focus = True

            NormalLabel:
                text: "Montant de la TVA"
            FormTextInput:
                id: tva
                text: root.expense and root.expense.get('tva') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('tva', args[0].text)
                    valid.focus = True

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    disabled: not (root.expense and root.expense.get('type'))
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        root.expense = {}
                        date.text = ''
                        description.text = ''
                        ht.text = ''
                        tva.text = ''


            Widget:
                id: colspan1

<CommonEditFormScreen>:
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            size_hint_y: None
            height: small_button_height
            text: 'Retour'
            on_press:
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        NormalButton:
            size_hint_y: None
            height: small_button_height
            text: 'Supprimer'
            on_press:
                app.delete_expense(root.expense)
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        GridLayout:
            cols: 2
            Widget:
            Widget:
            NormalLabel:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            NormalSpinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values: app.settings and [opt['label'].decode('utf-8') for opt in json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes'))
            Widget
            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))
            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            FormTextInput:
                id: date
                text: root.get_date()
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('date', args[0].text)
                    description.focus = True

            NormalLabel:
                text: "Description"
            FormTextInput:
                id: description
                text: root.expense and root.expense.get('description') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('description', args[0].text)
                    ht.focus = True

            NormalLabel:
                text: "Montant HT"
            FormTextInput:
                id: ht
                text: root.expense and root.expense.get('ht') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('ht', args[0].text)
                    tva.focus = True

            NormalLabel:
                text: "Montant de la TVA"
            FormTextInput:
                id: tva
                text: root.expense and root.expense.get('tva') or ""
                disabled: not (root.expense and root.expense.get('type'))
                on_text_validate:
                    root.set_value('tva', args[0].text)
                    valid.focus = True

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    disabled: not (root.expense and root.expense.get('type'))
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        date.text = ''
                        description.text = ''
                        ht.text = ''
                        tva.text = ''

            Widget:
                id: colspan1

<ExpenseListScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'
        ListView:
            adapter: ListAdapter(data=root.data, cls=Factory.ExpenseListItem, args_converter=root.args_converter)

<ExpenseListItem>:
    height: '36sp'
    size_hint_y: None

    canvas:
        Color:
            rgba: background_dark
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgb: .3, .3, .3
        Rectangle:
            pos: self.pos
            size: self.width, 1

    BoxLayout:
        padding: '5dp'

        Image:
            source: 'data/valid_16.png' if root.synced else  'data/edit_16.png' if root.todo in ('update', 'add') else 'data/delete_16.png' if root.todo == 'delete' else ''
            mipmap: True
            size_hint_x: None
            width: self.height

        NormalLabel:
            text: root.date

        NormalLabel:
            text: root.description

        NormalButton:
            size_hint_y: 1
            text: '>'
            size_hint_x: None
            width: self.height
            on_release: app.edit_expense(root.index)



<SyncPopup>:
    size_hint: .9, .5
    title: 'syncing'
    auto_dismiss: False

    BoxLayout:
        canvas:
            Color:
                rgba: background_dark
            Rectangle:
                pos: self.pos
                size: self.size

        orientation: 'vertical'
        Label:
            text: '%s/%s' % (root.progress, len(app.settings.items('tosync')))

        Widget:
            size_hint_y: None
            height: '30sp'
            canvas:
                Color:
                    rgba: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

                Color:
                    rgba: .5, .5, .5, 1
                Rectangle:
                    pos: self.x + 4, self.y + 4
                    size:
                        (
                        (self.width - 8) * (root.progress / (len(app.settings.items('tosync'))+1)),
                        self.height - 8
                        )
        NormalButton:
            text: 'errors: %s' % len(root.errors)
            # XXX do some error display

        NormalButton:
            activated: root.done
            text: 'Ok'
            on_press: root.dismiss()

        ScrollView:
            GridLayout:
                height: self.minimum_height
                size_hint_y: None
                cols: 1

                NormalLabel:
                    text: ''.join(unicode(x) for x in root.errors)
                    size_hint_y: None
                    height: self.texture_size[1] + 2 * self.line_height

<NormalPopup@Popup>:
    size_hint: .8, .8
    title_color: text_color_dark
    separator_color: backround_color
    background: 'data/rounded-border.png'
    border: 4, 4, 4, 4


<FormTextInput@TextInput>:
    multiline: False
    size_hint_y: None
    height: small_button_height
    on_focus: if not self.focus: self.dispatch('on_text_validate')

<SettingFormTextInput@FormTextInput>:
    setting: ''
    next_form: None
    text: app.settings and self.setting and app.settings.get('settings', self.setting) or ''
    on_text_validate:
        app.settings.set('settings', self.setting, args[0].text)
        if self.next_form: self.next_form.focus = True

<SettingSwitch@Switch>:
    setting: ''
    size_hint_y: None
    height: small_button_height
    active: app.settings and self.setting and app.settings.get('settings', self.setting) == 'True' or False
    on_active: app.settings.set('settings', self.setting, str(args[1]))

<ExpenseFormTextInput@FormTextInput>:
    attribute: ''
    expense: None
    next_form: None
    text: root.expense and root.expense.get(attribute)
    disabled: not (root.expense and root.expense.get('type'))
    on_text_validate:
        root.set_value('date', args[0].text)
        start.focus = True

<PrefilEntry>:
    size_hint_y: None
    height: small_button_height
    text: '%s - %s' % (self.entry.get('description'), self.entry.get('ht')) if self.entry else ''

    on_press:
        app.manager.current_screen.expense.update(self.entry)
        self.popup.dismiss()

<SelectPrefilPopup>:
    size_hint: .8, .8
    title: 'Séléctionner une entrée précédente comme modèle'

    ScrollView:
        GridLayout:
            cols: 1
            id: container
            size_hint_y: None
            height: self.minimum_height

<SelectPrefilButton@NormalButton>:
    expenses: []
    text: 'Utiliser saisie précédente (%s)' % len(self.expenses)
    on_press: Factory.SelectPrefilPopup(entries=self.expenses).open()
    disabled: not len(self.expenses)
